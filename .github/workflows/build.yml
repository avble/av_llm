name: Build and Test

on: workflow_dispatch

jobs:
  macOS-arm64:
    runs-on: macos-14

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: prepare build
        id: prepare
        run: brew install curl

      - name: Build
        id: cmake_build
        run: |
          cmake --preset arm64-apple-clang-release
          cmake --build build-arm64-apple-clang-release

  macOS-x64:
    runs-on: macos-13

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: prepare build
        id: prepare
        run: brew install curl

      - name: Build
        id: cmake_build
        run: |
          cmake --preset x64-apple-clang-release
          cmake --build build-x64-apple-clang-release

  Ubuntu:
    runs-on: ubuntu-22.04

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: prepare build
        id: prepare
        run: sudo apt-get install libcurl4-openssl-dev

      - name: Build
        id: cmake_build
        run: |
          cmake --preset x64-Ubuntu-gcc-release
          cmake --build build-x64-Ubuntu-gcc-release

  Windows-vulkan:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download and Install Vulkan SDK
        shell: pwsh
        run: |
          $VulkanVersion = "1.3.280.0"
          $VulkanInstallerUrl = "https://sdk.lunarg.com/sdk/download/$VulkanVersion/windows/VulkanSDK-$VulkanVersion-Installer.exe"
          Invoke-WebRequest -Uri $VulkanInstallerUrl -OutFile VulkanSDK-Installer.exe
          Start-Process .\VulkanSDK-Installer.exe -ArgumentList '--accept-licenses --default-answer --confirm-command install' -Wait
          # Find VulkanSDK installation directory (default for LunarG installer)
          $VulkanRoot = "$Env:VULKAN_SDK"
          echo "VULKAN_SDK=$VulkanRoot" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set up vcpkg and install libcurl
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl:x64-windows
          choco install ninja -y

      - name: Remove local-only vcvars64.bat calls
        shell: pwsh
        run: |
          (Get-Content build_vulkan.bat) -replace 'call\s+"?E:\\software_vs\\VC\\Auxiliary\\Build\\vcvars64\.bat"?', '' | Set-Content build_vulkan_ci.bat

      - name: Build with Vulkan
        shell: cmd
        run: |
          set Vulkan_SDK=C:\VulkanSDK\1.3.280.0
          build_vulkan_ci.bat

  windows-sycl:
    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    env:
      WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/7cd9bba0-7aab-4e30-b3ae-2221006a4a05/intel-oneapi-base-toolkit-2025.1.1.34_offline.exe
      WINDOWS_DPCPP_MKL: intel.oneapi.win.cpp-dpcpp-common:intel.oneapi.win.mkl.devel:intel.oneapi.win.dnnl:intel.oneapi.win.tbb.devel
      ONEAPI_ROOT: "C:/Program Files (x86)/Intel/oneAPI"

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install
        run: |
          scripts/install-oneapi.bat $WINDOWS_BASEKIT_URL $WINDOWS_DPCPP_MKL

      - name: Set up vcpkg and install libcurl
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl:x64-windows
          choco install ninja -y

      - name: Build
        id: cmake_build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 --force
          build_sycl.bat
